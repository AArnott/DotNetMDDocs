// <copyright file="Program.cs" company="Chris Crutchfield">
// Copyright (C) 2017  Chris Crutchfield
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
// </copyright>

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Threading.Tasks;
using DotNetMDDocs.XmlDocParser;
using McMaster.Extensions.CommandLineUtils;

namespace DotNetMDDocs
{
    internal class Program
    {
        [Required]
        [Option(Description = "Path to the Xml documentation generated by MSBuild.")]
        public string XmlPath { get; set; }

        [Option(Description = "Path to the documents folder.")]
        public string DocumentPath { get; set; } = "docs";

        public static async Task<int> Main(string[] args)
        {
            var @return = await CommandLineApplication.ExecuteAsync<Program>(args);

#if DEBUG
            Console.WriteLine("Press any key to continue...");
            Console.ReadKey(true);
#endif

            return @return;
        }

        private async Task OnExecuteAsync()
        {
            var xmlpath = this.XmlPath;
            var dllPath = Path.Combine(Path.GetDirectoryName(this.XmlPath), $"{Path.GetFileNameWithoutExtension(this.XmlPath)}.dll");

            var document = new Document(xmlpath, dllPath);

            var docs = Directory.CreateDirectory(this.DocumentPath);

            foreach (var type in document.Types)
            {
                var rootDir = Directory.CreateDirectory(Path.Combine(docs.FullName, Path.Combine(type.Namespace.Split('.'))));
                var typeDir = new DirectoryInfo(Path.Combine(rootDir.FullName, type.SafeName));

                if (typeDir.Exists)
                {
                    typeDir.Delete(true);
                }

                typeDir.Create();

                var typeDocBuilder = new TypeDocBuilder(type, document, docs.Name);
                using (var stream = File.CreateText(Path.Combine(rootDir.FullName, $"{type.SafeName}.md")))
                {
                    await stream.WriteAsync(typeDocBuilder.Generate());
                }

                // Constructors
                var constructorsTask = this.GenerateDocsAsync<MethodDocBuilder>(type.Constructors, type, document, typeDir, "Constructors");

                // Properties
                var propertiesTask = this.GenerateDocsAsync<PropertyDocBuilder>(type.Properties, type, document, typeDir, "Properties");

                // Methods
                var methodsTask = this.GenerateDocsAsync<MethodDocBuilder>(type.Methods, type, document, typeDir, "Methods");

                // Fields
                var fieldsTask = this.GenerateDocsAsync<FieldDocBuilder>(type.Fields, type, document, typeDir, "Fields");

                // Allow all the tasks to execute in parallel.
                await Task.WhenAll(constructorsTask, propertiesTask, methodsTask, fieldsTask);
            }
        }

        private async Task GenerateDocsAsync<TBuilder>(IEnumerable<BaseDoc> docs, TypeDoc type, Document document, DirectoryInfo typeDir, string dirName)
            where TBuilder : DocBuilder
        {
            var docDir = Directory.CreateDirectory(Path.Combine(typeDir.FullName, dirName));
            foreach (var doc in docs)
            {
                var docBuilder = (TBuilder)Activator.CreateInstance(typeof(TBuilder), doc, type, document);
                using (var stream = File.CreateText(Path.Combine(docDir.FullName, $"{doc.SafeName}.md")))
                {
                    await stream.WriteAsync(docBuilder.Generate());
                }
            }
        }
    }
}
